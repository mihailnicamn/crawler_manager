global.scraper = {
  name : `{{name}}`,
  base_url: `{{url}}`,
  pages: JSON.parse(`{{subs}}`),
  results: []
}
const temp = () => {
  const files = require("fs");
  const { spawn } = require('child_process');
  const runningFile = () => {
    const directory = module.filename.split("/")
    return directory[directory.length - 1];
  }
  const temp_dir = () => {
    // Math random string
    const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    files.mkdirSync(`./temp_${randomString}`);
    global.temporary_dir = `./temp_${randomString}`;
    return `./temp_${randomString}`;
  }
  const getDependeces = (script_data) => {
    const rows = script_data.split("\n");
    const dependencies = [];
    rows.forEach((row) => {
      if (row.includes("require")) {
        const regex = /require\((.*?)\)/g;
        const matches = row.match(regex);
        if (matches) {
          matches.forEach((item) => {
            dependencies.push(item.replace("require(", "").replace(")", "").replace(/'/g, "").replace(/"/g, ""));
          });
        }
      }
    });
    return dependencies.filter((item, index) => {
      item != "," && item != " " && item != "" && item != ".";
    });
  }

  const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);

  const thisContent = files.readFileSync(runningFile(), "utf8");
  console.log(getDependeces(thisContent).join(" "))
  temp_dir();
  const flow = [
    `cp ${runningFile()} ${global.temporary_dir}/${runningFile()}`,
    `cd ${global.temporary_dir}`,
    `npm init -y`,
    `npm install ${getDependeces(thisContent).join(" ")}`,
    `node ${runningFile()} scrape`,
    `cp ${global.scraper.name}_results.json ../${global.scraper.name}_${randomString}_results.json`,
    `cd ..`,
    `rm -rf ${global.temporary_dir}`,
  ]
  const child = spawn(flow.join(" && "), [], { shell: true, stdio: 'pipe' });
  child.stdout.on('data', (data) => {
    console.log(data.toString());
  });
  child.stderr.on('data', (data) => {
    console.log(data.toString());
  });
  child.on('close', (code) => {
    console.log(code.toString());
    const beautify = require("js-beautify").js_beautify
    const results = files.readFileSync(`${global.scraper.name}_${randomString}_results.json`, "utf8");
    const results_beautified = beautify(results,  { indent_size: 2, space_in_empty_paren: true });
    files.writeFileSync(`${global.scraper.name}_${randomString}_results.json`, results_beautified);
  });

  console.log(
    runningFile(),
    global.temporary_dir,
    getDependeces(thisContent),
  )
}
const scrape = () => {
const userAgent = require('user-agents');
//custom functions
async function scrollDown(page, time = 10) {
  await page.evaluate(async (time) => {
    await new Promise((resolve) => {
      var totalHeight = 0;
      var distance = 100;
      var timer = setInterval(() => {
        var scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;

        if (totalHeight >= scrollHeight - window.innerHeight) {
          clearInterval(timer);
          resolve();
        }
      }, time);
    });
  });
}
async function scrollUp(page, time = 10) {
  await page.evaluate(async (time) => {
    await new Promise((resolve) => {
      var totalHeight = 0;
      var distance = 100;
      var timer = setInterval(() => {
        var scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, -distance);
        totalHeight += distance;
        if (totalHeight >= scrollHeight - window.innerHeight) {
          clearInterval(timer);
          resolve();
        }
      }, time);
    });
  });
}
async function wait(time) {
  return new Promise(resolve => {
    setTimeout(resolve, time)
  })
}
const safeUndefined = (object,key) => {
  if(typeof object == "undefined"){
    return undefined
  }
  if(typeof object[key] == "undefined"){
    return undefined
  }
  return object[key]
}
//!custom functions

//config
const setConfig = (config) => {
  Object.keys(config).forEach((key) => {
    global[key] = config[key];
  });
}
const getUserAgent = (options) => {
  if(options == "random"){
    return new userAgent().toString()
  }
  if(options == "desktop"){
    return new userAgent({deviceCategory: 'desktop'}).toString()
  }
  if(options == "mobile"){
    return new userAgent({deviceCategory: 'mobile'}).toString()
  }
  if(Array.isArray(options)){
    //if any of the options contains object with key:"mine" return object.value
    const mine = options.filter((option) => {
      if(typeof option == "object" && option.key == "mine"){
        return true
      }
      return false
    })
    if(mine.length > 0){
      return mine[0].value
    }
    return new userAgent(options).toString()
  }
  return null
}
//!config

//user script
const userScript = async (page) => {
  return new Promise(async (resolve, reject) => {
    const returnResults = resolve;
    const returnError = reject;
    try {
      {{user_script}}
    } catch (e) {
      returnError(e);
    }
  });
}

//!user script


//main
const run = async () => {
  return new Promise(async (resolve) => {
    const returnResults = resolve;
    try {
      global.puppeteer = require('puppeteer');
      var user_agent = getUserAgent(global.user_agent);
      if(user_agent == null){
        user_agent = ``;
      }else{
        user_agent = `--user-agent=${getUserAgent(global.user_agent)}`;
      }
      global.browser = await puppeteer.launch({
        ...global.browser_options,
        args : [
          ...safeUndefined(global.browser_config,"args") || [],
          
        ]
      })
      if(global.scraper.pages.length > 0 && global.scraper.base_url.includes("{{sub}}")){
        returnResults(await Promise.all(global.scraper.pages.map(async (page) => {
          const pageInstance = await global.browser.newPage();
          await pageInstance.goto(global.scraper.base_url.replaceAll("{{sub}}", page));
          const result = {
            url : global.scraper.base_url.replaceAll("{{sub}}", page),
            runned_at : `${new Date().toISOString()}`,
            data : await userScript(pageInstance)
          }
          await pageInstance.close();
          return result;
        
        })));
      } else {
        const page = await global.browser.newPage();
        await page.goto(global.scraper.base_url);
        const result = {
          url : global.scraper.base_url,
          runned_at : `${new Date().toISOString()}`,
          data : await userScript(page)
        }
        await page.close();
        returnResults(result);
      }
      global.browser.close();
    } catch (e) {
      resolve(e);
      global.browser.close();
    }
  });
}
//!main







(async () => {
//run
setConfig({
  browser_options: {
    headless: false,
  },
  user_agent: "mobile"
});
global.scraper.results = await run();
//!run
const files = require('fs');
files.writeFileSync(global.scraper.name+'_results.json', JSON.stringify(global.scraper.results));
})();

}
const args = process.argv.slice(2);
if (args.length == 0) {
  temp();
} else {
  scrape();
}
